*************************************************************************
*	MAIN 				main.msa			*
*************************************************************************
	p68h11
*********************************************************************************
*	DEPENDENCIAS: 								*
*		- UI.msa: 	initdis,clrdis,println,waitkey,outchar,numForm	*
*		- string.msa: 	int4str,str2int					*
*		- math.msa:	op_suma,op_rest,op_div,op_mul			*
*		- utils.msa							*
*										*
*		- str_hand.def (string handlers)				*
*		- op_hand.def (operation handlers)				*
*		- flowctrl.def (flow control macros)				*
* P/ LINKEAR:									*
* 	link11_2 main UI string math utils					*
*********************************************************************************
	extern	initdis,clrdis,println,waitkey,outchar,numForm
	extern	int4str,str2int
	extern	op_suma,op_rest,op_div,op_mul

* extern	debug,initdeb		(DEBUG ONLY)


*********************************************************
*		INCLUSION DE MACROS			*
*********************************************************

$str_hand.def		Incluyo los handlers para string.msa
$op_hand.def		Incluyo los handlers para math.msa

$flowctrl.def		Incluyo las macros para controlar el flujo del programa



	public	main

* 	extern	counter			(DEBUG ONLY) var. global para depurar errores. Loops counter
* 	public	str_var,op1,lastop	(DEBUG ONLY) para trackear la posicion de las vars del programa
*					No las usamos externamente

	rseg	CODE
*****************************************************************
*			MAIN					*
*****************************************************************
main	EQU	*
	lds	#stk_ini
	jsr	setup			ejecuto la configuracion inicial



loop	equ	*
* inc	counter			(DEBUG ONLY) increment loop counter

*************************************************************************
*			     WORKAROUND					*  TO-DO:
* Esta parte del codigo esta enmendada, deberia ir en numForm		*    REVISAR!
* o en otra subrutina a evaluar, pero a falta de tiempo queda aqui	*    SOLUCIONAR!
*************************************************************************
	clr	str_var+2		borro los ultimos dos caracteres del display
	clr	str_var+3
	ldaa	lastop			cargo la ultima operacion
	cmpa	#5			si es un (=) [F] code=5
	bne	next01
	%int4str op1,str_var,pass0	;convierto el resultado numerico (op1) a str -> str_var
	jsr	error			si por algun motivo falla, voy a error
pass0	%println str_var		si la conversion es exitosa, la muestro por pantalla

next01	equ	*			si no es un igual, evaluo el input
*			### END OF WORKAROUND ###			*
*************************************************************************



	ldy	#str_var		cargo la direccion de la cadena usada por el display
	jsr	numForm			formulario de entrada (AccA = code, AccB = inputVal)
	staa	thisop			guardo el codigo de operacion actual

******************************************************************** TO-DO: Optimizar!!!!!
*********** SWITCH SEGUN ULTIMA OPERACION***************************
	ldaa	lastop			Cargo el codigo de ultima operacion
	%switch	OP,0,5			Switch case segun la ultima operacion
	bra	pass			si no se reconoce el codigo, salgo (default)

OP0000	equ	*			SUMA (+) A
	%op_hand op_suma,op1,op_err,op_ok		op1 = op1 + B

OP0001	equ	*			RESTA (-) B
	%op_hand op_rest,op1,op_err,op_ok		op1 = op1 - B
	
OP0002	equ	*			CLEAR (C) C
	jsr	setup			ejecuto el setup para cargar todo en cero
	bra	endloop			desde cero y reinicio el loop

OP0003	equ	*			DIVIDE (/) D
	%op_hand op_div,op1,op_err,op_ok		op1 = op1 / B

OP0004	equ	*			MULTIPLICA (*) E
	%op_hand op_mul,op1,op_err,op_ok		op1 = op1 * B

OP0005	equ	*			IGUAL (=) F
	bra	pass					op1 = op1 -> (print result)

*					CUIDADO: La macro op_hand es ineficiente,
*						innecesaria y debe ser corregida cuanto antes
*						Leer comentario de op_hand.def !!!

*********************************************************
* 		OPERATION ERROR				*
* Si la operacion falla, muestra error y termina	*
op_err	equ	*	
	jsr	error		muestro mensaje de error
	bra	endloop		RETORNO


*********************************************************
* 		OPERATION OK				*
* Si la operacion es exitosa, guardo el resultado	*
op_ok	equ	*			operacion EXITOSA
	tstb				Si B > 0 -> hay resto (solo op_div puede dejar AccB > 0)
	beq	pass
* 					TO-DO: Implementar mostrar resto de la division

pass	equ	*			;
	ldaa	thisop
	staa	lastop			actualizo el codigo de operacion
	bra	endloop


*********************************************************
* 		END OF LOOP				*
*********************************************************
endloop	equ	*
*	[end functions]
*	...
	jmp	loop			repetir loop



*********************************************************
*		SUBRUTINA SETUP				*
* Descripcion:						*
*	Realiza todas las configuraciones iniciales	*
*********************************************************
setup	EQU	*
	jsr	initdis		inicio el display y teclado
	jsr	clrdis		borro el display
	ldx	#0
	stx	op1		inicio op1 en cero
	stx	str_var+2	borro los ultimos caracteres de str_var
	
* ldaa	#ERRORS		(DEBUG ONLY) inicio las funciones de depuracion
* jsr	initdeb
*				Inicio el status code del ultimo operador en 0 (+) para
	clr	lastop		sumar el primer valor con 0 (cero), de esta forma lo guardo
	clr	thisop
	rts




*********************************************************
*		SUBRUTINA ERROR CASE			*
* Descripcion:						*
*	Ejecuta las funciones en caso de error		*
*********************************************************
* TODO: Implementar errores particulares para div,mul,res
*********************************************************
error	EQU	*
	%println err_msg	;muestro mensaje de error
pressC	jsr	waitkey		espero a que presionen cualquier tecla
	cmpa	#$C		si no presionaron CLEAR repito
	bne	pressC

	jsr	setup		inicio todo desde cero
	rts



*********************************************************
*			CONSTANTES			*
*********************************************************
	rseg	CONST

err_msg	FCC	'ERR '		mensaje de error



*********************************************************
*	VARIABLES GLOBALES EN MEMORIA	*
*********************************************************
	rseg	VARS

str_var	RMB	4		reservo e inicio la cadena en cero (equivale a un RMB y FCC juntos)
op1	RMB	2		variable para el operando 1 de 16 bits
lastop	RMB	1		last operation code
thisop	RMB	1		current operation code

******************** STACK DATA *************************
stack	RMB	64
stk_ini	EQU	*-1


	END